from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

# C·∫•u h√¨nh API
GEOCODE_API_URL = "https://nominatim.openstreetmap.org/search"
BASE_API_URL = "http://localhost:8000/api/profiles"  # ho·∫∑c domain th·ª±c t·∫ø
AUTH_TOKEN = "Bearer YOUR_ACCESS_TOKEN"

# ---- Geocode: chuy·ªÉn ƒë·ªãa ch·ªâ ‚Üí lat/lng ----
def geocode_address(address):
    params = {
        "q": address,
        "format": "json",
        "limit": 1
    }
    headers = {
        "User-Agent": "flask-app"
    }

    response = requests.get(GEOCODE_API_URL, params=params, headers=headers)
    data = response.json()

    if not data:
        return None, None

    return data[0]['lat'], data[0]['lon']

# ---- G·ªçi API update location ----
def update_location(lat, lng):
    url = f"{BASE_API_URL}/location"
    headers = {
        "Authorization": AUTH_TOKEN,
        "Content-Type": "application/json"
    }
    body = {
        "lat": str(lat),
        "lng": str(lng)
    }

    return requests.put(url, headers=headers, json=body)

# ---- G·ªçi API nearby ----
def get_nearby_profiles(lat, lng, radius="10"):
    url = f"{BASE_API_URL}/location/nearby"
    headers = {
        "Authorization": AUTH_TOKEN,
        "Content-Type": "application/json"
    }
    body = {
        "lat": str(lat),
        "lng": str(lng),
        "radius": radius
    }

    return requests.post(url, headers=headers, json=body)

# ---- Flask Route ch√≠nh ----
@app.route('/update_and_search_location', methods=['POST'])
def update_and_search_location():
    data = request.json
    address = data.get("address")
    radius = data.get("radius", "10")  # default 10km

    if not address:
        return jsonify({
            "code": "400",
            "message": "Thi·∫øu tham s·ªë 'address'"
        }), 400

    lat, lng = geocode_address(address)

    if not lat or not lng:
        return jsonify({
            "code": "404",
            "message": "Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô cho ƒë·ªãa ch·ªâ ƒë√£ cho"
        }), 404

    # G·ªçi API c·∫≠p nh·∫≠t v·ªã tr√≠
    update_res = update_location(lat, lng)

    # G·ªçi API t√¨m ki·∫øm
    nearby_res = get_nearby_profiles(lat, lng, radius)

    return jsonify({
        "code": "200",
        "message": "C·∫≠p nh·∫≠t v√† t√¨m ki·∫øm th√†nh c√¥ng",
        "location": {"lat": lat, "lng": lng},
        "update_status": update_res.json(),
        "nearby_profiles": nearby_res.json()
    }), 200


# ---- Ch·∫°y Flask (local test) ----
if __name__ == '__main__':
    app.run(debug=True)


-------

üìå Khi ng∆∞·ªùi d√πng t·∫°o/c·∫≠p nh·∫≠t profile (c√≥ ƒë·ªãa ch·ªâ):
D√πng geocoding API ƒë·ªÉ chuy·ªÉn "ƒê·ªëng ƒêa H√† N·ªôi" ‚Üí lat = 21.02, lng = 105.83

L∆∞u c·∫£ address, lat, lng v√†o DB:

sql
Copy
Edit
INSERT INTO profile (name, address, lat, lng)
VALUES ('Nguy·ªÖn VƒÉn A', 'ƒê·ªëng ƒêa H√† N·ªôi', 21.02, 105.83);
üîç Khi t√¨m ki·∫øm profile g·∫ßn m·ªôt ƒë·ªãa ch·ªâ:
Ng∆∞·ªùi d√πng nh·∫≠p: "p25 k5 B√°ch Khoa Hai B√† Tr∆∞ng H√† N·ªôi"

D√πng geocoding ‚Üí lat = 21.005, lng = 105.84

T√¨m t·∫•t c·∫£ c√°c profile c√≥ lat/lng g·∫ßn ƒë√≥ b·∫±ng c√¥ng th·ª©c kho·∫£ng c√°ch Haversine

üß† V√≠ d·ª• c√¢u truy v·∫•n t√¨m profile g·∫ßn ƒë√≥:
Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ c√°c c·ªôt lat, lng trong b·∫£ng profile
B·∫°n c√≥ th·ªÉ t√¨m c√°c profile trong b√°n k√≠nh 10km b·∫±ng SQL:

sql
Copy
Edit
SELECT *,
       (6371 * ACOS(
           COS(RADIANS(:user_lat)) * COS(RADIANS(lat)) *
           COS(RADIANS(lng) - RADIANS(:user_lng)) +
           SIN(RADIANS(:user_lat)) * SIN(RADIANS(lat))
       )) AS distance
FROM profile
HAVING distance < 10
ORDER BY distance ASC;
6371 l√† b√°n k√≠nh Tr√°i ƒê·∫•t t√≠nh theo km

:user_lat v√† :user_lng l√† t·ªça ƒë·ªô ng∆∞·ªùi d√πng

üõ† T√≥m t·∫Øt c√°ch tri·ªÉn khai:
Giai ƒëo·∫°n	Vi·ªác c·∫ßn l√†m
Khi t·∫°o profile	‚úÖ D√πng geocoding ƒë·ªÉ l·∫•y lat/lng t·ª´ ƒë·ªãa ch·ªâ, l∆∞u v√†o DB
Khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ	‚úÖ L√†m l·∫°i geocoding n·∫øu address thay ƒë·ªïi
Khi t√¨m nearby	‚úÖ Geocoding ƒë·ªãa ch·ªâ ng∆∞·ªùi d√πng nh·∫≠p, t√¨m profile g·∫ßn ƒë√≥ b·∫±ng SQL (Haversine)

‚úÖ N·∫øu hi·ªán t·∫°i b·∫°n ch∆∞a c√≥ c·ªôt lat/lng, n√™n:
Th√™m 2 c·ªôt m·ªõi trong DB:

sql
Copy
Edit
ALTER TABLE profile ADD COLUMN lat DOUBLE;
ALTER TABLE profile ADD COLUMN lng DOUBLE;
Vi·∫øt script ƒë·ªÉ ch·∫°y geocoding l·∫°i to√†n b·ªô d·ªØ li·ªáu c≈© (m√¨nh c√≥ th·ªÉ vi·∫øt cho b·∫°n n·∫øu c·∫ßn)

‚ùìB·∫°n mu·ªën:
M√¨nh vi·∫øt lu√¥n SQL + script update to√†n b·ªô profile?

Hay gi√∫p b·∫°n t√≠ch h·ª£p ngay v√†o Flask backend?

C·ª© n√≥i r√µ c√°ch b·∫°n ƒëang l∆∞u profile hi·ªán t·∫°i, m√¨nh gi√∫p tri·ªÉn khai chi ti·∫øt h∆°n.